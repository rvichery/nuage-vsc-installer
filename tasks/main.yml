---
# tasks file for vsc
- name: Pull facts on hypervisor
  action: setup
  delegate_to: "{{ hypervisor }}"

- name: Install additional packages to modify VSC qcow image and run VSC as VM - RedHat Host
  yum: name={{ item }} state=present
  with_items:
   - qemu-kvm
   - libvirt
   - bridge-utils
   - libguestfs-tools
   - libvirt-python
  when: ansible_os_family == "RedHat"
  delegate_to: "{{ hypervisor }}"

- name: Install additional packages to modify VSC qcow image and run VSC as VM - Debian Host
  apt: name={{ item }} state=present update_cache=yes cache_valid_time=3600
  with_items:
   - qemu-kvm
   - libvirt-bin
   - bridge-utils
   - libguestfs-tools
   - python-libvirt
  when: ansible_os_family == "Debian"
  delegate_to: "{{ hypervisor }}"

- name: Start libvirt service
  service: name=libvirtd state=started enabled=yes
  delegate_to: "{{ hypervisor }}"

- name: Include OS-specific variables.
  include_vars: "{{ ansible_os_family }}.yml"

# Copy VSC qcow2 image to target host
- name: Creates VSC directory
  file: path={{ images_path }}{{ inventory_hostname }} state=directory owner={{ libvirt.user }} group={{ libvirt.group }}
  delegate_to: "{{ hypervisor }}"

- name: Copy over VSC qcow2 image
  copy: src={{ vsc_qcow2 }} dest={{ images_path }}{{ inventory_hostname }}/{{ inventory_hostname }}-src.qcow2 owner={{ libvirt.user }} group={{ libvirt.group }}
  delegate_to: "{{ hypervisor }}"
  register: qcowcopy

# Copy VSC Configuration files to target host
- name: Setup VSC temporary configuration files
  template: src={{ item }}.j2 backup=no dest={{ images_path }}{{ inventory_hostname }}/{{ item }}
  delegate_to: "{{ hypervisor }}"
  with_items:
    - bof.cfg
    - config.cfg
    - vsc.xml
  register: configcopy

# Check if VSC is running
- name: get guest info
  virt: command=info
  register: virt_info
  delegate_to: "{{ hypervisor }}"

# (Re-)Define VSCVM
- name: (Re-)Define VSC VM
  include: definevscvm.yml
  when: configcopy.changed or qcowcopy.changed or virt_info[inventory_hostname]['state'] != 'running'

# Start VSC
- name: Start VSC guest VM
  virt: name={{ inventory_hostname }} state=running
  delegate_to: "{{ hypervisor }}"

# Assert that VSC is running
- name: get guest info
  virt: command=info
  register: virt_info
  delegate_to: "{{ hypervisor }}"

- assert: { that: "virt_info[inventory_hostname]['state'] == 'running'" }
  delegate_to: "{{ hypervisor }}"
